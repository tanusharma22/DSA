Pyhton-
class Solution:
    def threeSum(self, array: List[int]) -> List[List[int]]:
        from collections import OrderedDict
        array.sort()
        triplets=[]
        for i in range(len(array) - 2):
            left = i + 1
            right = len(array) - 1
            while left < right:
                currentSum = array[i] + array[left] + array[right]
                if currentSum == 0:
                    triplets.append([array[i], array[left], array[right]])
                    left += 1
                    right -= 1
                elif currentSum < 0:
                    left += 1
                elif currentSum > 0:
                    right -= 1
        triplets=map(list, OrderedDict.fromkeys(map(tuple, triplets)))
        return triplets


        Javascript-
        /**
 * @param {number[]} nums
 * @return {number[][]}
 */
var threeSum = function(nums) {
    nums.sort()
    const triplet= new Array();
    for(i=0;i<nums.length-2;i++)
    {
        var left=i+1
        var right=nums.length-1
        if (i > 0 && nums[i] === nums[i - 1]) {
            continue
        }
        while(left<right)
        {
            currsum=nums[i]+nums[left]+nums[right]
            if(currsum==0)
            {
                
                triplet.push([nums[i],nums[left],nums[right]])
                left=left+1
                right=right-1
            }
            else if(currsum<0)
            {
                left=left+1

            }
            else if(currsum>0)
            {
                right=right-1
            }
             while(nums[left] === nums[left - 1] && left < right) {
                    left++

        }
        }
        
    }
    return(triplet)
};

To remove duplicate we initially sort the array and check in itterartion that if nums[i]==nums[i-1] to avoid taking same innitial number.
